name: CI

on: 
  push:
    paths-ignore:
      - '**.md'
      - '**.png'
      - '**.svg'
      - '**.py'
      - '**.sh'
  pull_request:
    paths-ignore:
      - '**.md'
      - '**.png'
      - '**.svg'
      - '**.py'
      - '**.sh'

jobs:
  ci:
    name: ${{ matrix.name }}
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:

        name: [ 
          windows-2019-cl,
          windows-2019-clang-cl,
          windows-2019-clang,
          windows-2019-mingw,
          ubuntu-20.04-gcc,
          ubuntu-20.04-clang,
          macOS-10.15-clang,
          macOS-10.15-gcc
        ]

        include:
          - name: windows-2019-cl
            os: windows-2019
            compiler: cl

          - name: windows-2019-clang-cl
            os: windows-2019
            compiler: clang-cl

          - name: windows-2019-clang
            os: windows-2019
            compiler: clang
      
          - name: windows-2019-mingw
            os: windows-2019
            compiler: mingw-w64

          - name: ubuntu-20.04-gcc
            os: ubuntu-20.04
            compiler: gcc
            version: "10"

          - name: ubuntu-20.04-clang
            os: ubuntu-20.04
            compiler: clang
            version: "10"
         
          - name: macOS-10.15-clang
            os: macOS-10.15
            compiler: xcode
            version: "12.2"
         
          - name: macOS-10.15-gcc
            os: macOS-10.15
            compiler: gcc
            version: "10"

    steps:
      - uses: actions/checkout@v2

    # Windows

      - name: Install and setup Windows packages
        if: runner.os == 'Windows'
        uses: ilammy/msvc-dev-cmd@v1

      - name: Install and setup MSYS2 mingw
        if: runner.os == 'Windows' && matrix.compiler == 'mingw-w64'
        uses: msys2/setup-msys2@v2     
        with:
          msystem: MINGW64
          install: mingw-w64-x86_64-toolchain mingw-w64-x86_64-cmake make gcc

      - name: Build Debug Windows MSVC
        if: runner.os == 'Windows' &&  matrix.compiler == 'cl'
        run: |
          cd tests
          Remove-Item build -recurse -ErrorAction Ignore
          mkdir build
          cd build
          cmake .. -G Ninja -DCMAKE_BUILD_TYPE=Debug
          cmake --build .
          .\tests.exe
      
      - name: Build Debug Windows clang-cl
        if: runner.os == 'Windows' &&  matrix.compiler == 'clang-cl'
        run: |
          cd tests
          Remove-Item build -recurse -ErrorAction Ignore
          mkdir build
          cd build
          cmake .. -G Ninja -DCMAKE_C_COMPILER=clang-cl -DCMAKE_CXX_COMPILER=clang-cl -DCMAKE_BUILD_TYPE=Debug
          cmake --build . 
          .\tests.exe    
      
      - name: Build Debug Windows clang
        if: runner.os == 'Windows' &&  matrix.compiler == 'clang'
        run: |
          cd tests
          Remove-Item build -recurse -ErrorAction Ignore
          mkdir build
          cd build
          cmake .. -G Ninja -DCMAKE_C_COMPILER=clang -DCMAKE_CXX_COMPILER=clang++ -DCMAKE_BUILD_TYPE=Debug
          cmake --build . 
          .\tests.exe  

      - name: Build Debug Windows mingw
        if: runner.os == 'Windows' &&  matrix.compiler == 'mingw-w64'
        shell: msys2 {0}
        run: |
          cd tests
          rm -rf build
          mkdir build
          cd build
          cmake .. -G"MSYS Makefiles" -DCMAKE_BUILD_TYPE=Debug
          cmake --build . -- -j2
          ./tests
          
      - name: Build Release Windows MSVC
        if: runner.os == 'Windows' &&  matrix.compiler == 'cl'
        run: |
          cd tests
          Remove-Item build -recurse -ErrorAction Ignore
          mkdir build
          cd build
          cmake .. -G Ninja -DCMAKE_BUILD_TYPE=Release
          cmake --build .
          .\tests.exe
      
      - name: Build Release Windows clang-cl
        if: runner.os == 'Windows' &&  matrix.compiler == 'clang-cl'
        run: |
          cd tests
          Remove-Item build -recurse -ErrorAction Ignore
          mkdir build
          cd build
          cmake .. -G Ninja -DCMAKE_C_COMPILER=clang-cl -DCMAKE_CXX_COMPILER=clang-cl -DCMAKE_BUILD_TYPE=Release
          cmake --build . 
          .\tests.exe    
      
      - name: Build Release Windows clang
        if: runner.os == 'Windows' &&  matrix.compiler == 'clang'
        run: |
          cd tests
          Remove-Item build -recurse -ErrorAction Ignore
          mkdir build
          cd build
          cmake .. -G Ninja -DCMAKE_C_COMPILER=clang -DCMAKE_CXX_COMPILER=clang++ -DCMAKE_BUILD_TYPE=Release
          cmake --build . 
          .\tests.exe

      - name: Build Release Windows mingw
        if: runner.os == 'Windows' &&  matrix.compiler == 'mingw-w64'
        shell: msys2 {0}
        run: |
          cd tests
          rm -rf build
          mkdir build
          cd build
          cmake .. -G"MSYS Makefiles" -DCMAKE_BUILD_TYPE=Release
          cmake --build . -- -j2
          ./tests



      # Linux 

      - name:  Install and setup Linux packages
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y ninja-build 

          if [ "${{ matrix.compiler }}" = "gcc" ]; then
            sudo apt-get install -y g++-${{ matrix.version }} g++-${{ matrix.version }}-multilib
            echo "CC=gcc-${{ matrix.version }}" >> $GITHUB_ENV
            echo "CXX=g++-${{ matrix.version }}" >> $GITHUB_ENV
          else
            sudo apt-get install -y clang-${{ matrix.version }} g++-multilib
            echo "CC=clang-${{ matrix.version }}" >> $GITHUB_ENV
            echo "CXX=clang++-${{ matrix.version }}" >> $GITHUB_ENV
          fi

      - name: Build Debug Linux
        if: runner.os == 'Linux'
        run: |
          cd tests
          rm -rf build
          mkdir build
          cd build
          cmake .. -G Ninja -DCMAKE_BUILD_TYPE=Debug
          cmake --build .
          ./tests
      
      - name: Build Debug Linux clang and libcxx
        if: runner.os == 'Linux' &&  matrix.compiler == 'clang'
        run: |
          cd tests
          rm -rf build
          mkdir build
          cd build
          cmake .. -G Ninja -DCMAKE_C_COMPILER=clang -DCMAKE_CXX_COMPILER=clang++ -DENABLE_LIBCXX=ON -DCMAKE_BUILD_TYPE=Debug
          cmake --build .
          ./tests

      - name: Build Release Linux
        if: runner.os == 'Linux'
        run: |
          cd tests
          rm -rf build
          mkdir build
          cd build
          cmake .. -G Ninja -DCMAKE_BUILD_TYPE=Release
          cmake --build .
          ./tests
      
      - name: Build Release Linux clang and libcxx
        if: runner.os == 'Linux' &&  matrix.compiler == 'clang'
        run: |
          cd tests
          rm -rf build
          mkdir build
          cd build
          cmake .. -G Ninja -DCMAKE_C_COMPILER=clang -DCMAKE_CXX_COMPILER=clang++ -DENABLE_LIBCXX=ON -DCMAKE_BUILD_TYPE=Release
          cmake --build .
          ./tests
     

      # macOS

      - name:  Install and setup MacOS packages
        if: runner.os == 'macOS'
        run: |
          brew install cmake ninja
          if [ "${{ matrix.compiler }}" = "gcc" ]; then
            brew install gcc@${{ matrix.version }}
            export "CC=gcc-${{ matrix.version }}" >> $GITHUB_ENV
            export "CXX=g++-${{ matrix.version }}" >> $GITHUB_ENV
          else
            ls -ls /Applications/
            sudo xcode-select -switch /Applications/Xcode_${{ matrix.version }}.app
            export "CC=clang-${{ matrix.version }}" >> $GITHUB_ENV
            export "CXX=clang++-${{ matrix.version }}" >> $GITHUB_ENV
          fi

      - name: Build Debug MacOS clang
        if: runner.os == 'MacOS' &&  matrix.compiler == 'xcode'
        run: |
          cd tests
          rm -rf build
          mkdir build
          cd build
          cmake .. -G Ninja -DCMAKE_BUILD_TYPE=Debug
          cmake --build .
          ./tests

      - name: Build Debug MacOS gcc
        if: runner.os == 'MacOS' &&  matrix.compiler == 'gcc'
        run: |
          cd tests
          rm -rf build
          mkdir build
          cd build
          cmake .. -G Ninja -DCMAKE_C_COMPILER=gcc-10 -DCMAKE_CXX_COMPILER=g++-10 -DCMAKE_BUILD_TYPE=Debug
          cmake --build .
          ./tests

      - name: Build Release MacOS clang
        if: runner.os == 'MacOS' &&  matrix.compiler == 'xcode' 
        run: |
          cd tests
          rm -rf build
          mkdir build
          cd build
          cmake .. -G Ninja -DCMAKE_BUILD_TYPE=Release
          cmake --build .
          ./tests

      - name: Build Release MacOS gcc
        if: runner.os == 'MacOS' &&  matrix.compiler == 'gcc'
        run: |
          cd tests
          rm -rf build
          mkdir build
          cd build
          cmake .. -G Ninja -DCMAKE_C_COMPILER=gcc-10 -DCMAKE_CXX_COMPILER=g++-10 -DCMAKE_BUILD_TYPE=Release
          cmake --build .
          ./tests
